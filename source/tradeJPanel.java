/*
 * This is a panel that is created each time a new trade is detected. It shows
 * all trade informations such as buyer name, seller name, etc. The different
 * actions performed by button clicks are also defined here.
 * 
 */

package wtc;

import com.sun.jna.platform.win32.User32;
import com.sun.jna.platform.win32.WinDef;
import java.awt.AWTException;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import static wtc.WTC.activeCardName;
import static wtc.WTC.buyerName;
import static wtc.WTC.itemName;
import static wtc.WTC.itemPos;
import static wtc.WTC.itemPrice;
import static wtc.WTC.mainWindow;
import static wtc.WTC.soldMsg;
import static wtc.WTC.thxMsg;
import static wtc.WTC.waitMsg;
import static wtc.mainFrame.cardsPanel;
import static wtc.mainFrame.jMenuTrades;

/**
 *
 * @author Jean-Luc Poissonnet alias Dreamzor
 */
public class tradeJPanel extends javax.swing.JPanel {

    /**
     * Creates new form tradeJPanel
     */
    
    static int delay1 = 10;
    static int delay2 = 50;
    
    public tradeJPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabelBuyerName = new javax.swing.JLabel();
        jLabelItemName = new javax.swing.JLabel();
        jLabelItemPrice = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabelItemPos = new javax.swing.JLabel();
        jPanelButtonCont = new javax.swing.JPanel();
        jButtonWait = new javax.swing.JButton();
        jButtonSold = new javax.swing.JButton();
        jButtonInvite = new javax.swing.JButton();
        jButtonTrade = new javax.swing.JButton();
        jButtonTyvm = new javax.swing.JButton();
        jButtonKick = new javax.swing.JButton();

        setBackground(new java.awt.Color(102, 102, 102));
        setMaximumSize(new java.awt.Dimension(300, 130));
        setMinimumSize(new java.awt.Dimension(300, 130));
        setPreferredSize(new java.awt.Dimension(300, 130));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setText("Buyer:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setText("Item:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 204, 204));
        jLabel3.setText("Price:");

        jLabelBuyerName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelBuyerName.setForeground(new java.awt.Color(153, 204, 255));
        jLabelBuyerName.setText(buyerName);
        jLabelBuyerName.setToolTipText("Click to send a message");
        jLabelBuyerName.setMaximumSize(new java.awt.Dimension(226, 14));
        jLabelBuyerName.setMinimumSize(new java.awt.Dimension(226, 14));
        jLabelBuyerName.setPreferredSize(new java.awt.Dimension(226, 14));
        jLabelBuyerName.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        jLabelBuyerName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabelBuyerNameMousePressed(evt);
            }
        });

        jLabelItemName.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        jLabelItemName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelItemName.setForeground(new java.awt.Color(153, 204, 255));
        jLabelItemName.setText(itemName);
        jLabelItemName.setToolTipText("Click to copy");
        jLabelItemName.setMaximumSize(new java.awt.Dimension(226, 14));
        jLabelItemName.setMinimumSize(new java.awt.Dimension(226, 14));
        jLabelItemName.setPreferredSize(new java.awt.Dimension(226, 14));
        jLabelItemName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabelItemNameMousePressed(evt);
            }
        });

        jLabelItemPrice.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelItemPrice.setForeground(new java.awt.Color(255, 255, 255));
        jLabelItemPrice.setText(itemPrice);
        jLabelItemPrice.setMaximumSize(new java.awt.Dimension(226, 14));
        jLabelItemPrice.setMinimumSize(new java.awt.Dimension(226, 14));
        jLabelItemPrice.setPreferredSize(new java.awt.Dimension(226, 14));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(204, 204, 204));
        jLabel4.setText("Tab:");

        jLabelItemPos.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelItemPos.setForeground(new java.awt.Color(255, 255, 255));
        jLabelItemPos.setText(itemPos);
        jLabelItemPos.setMaximumSize(new java.awt.Dimension(226, 14));
        jLabelItemPos.setMinimumSize(new java.awt.Dimension(226, 14));
        jLabelItemPos.setPreferredSize(new java.awt.Dimension(226, 14));

        jPanelButtonCont.setBackground(new java.awt.Color(51, 51, 51));
        jPanelButtonCont.setMaximumSize(new java.awt.Dimension(300, 50));
        jPanelButtonCont.setMinimumSize(new java.awt.Dimension(300, 50));
        jPanelButtonCont.setPreferredSize(new java.awt.Dimension(300, 50));

        jButtonWait.setBackground(new java.awt.Color(51, 51, 51));
        jButtonWait.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wtc/wait.png"))); // NOI18N
        jButtonWait.setToolTipText("");
        jButtonWait.setFocusPainted(false);
        jButtonWait.setMaximumSize(new java.awt.Dimension(40, 40));
        jButtonWait.setMinimumSize(new java.awt.Dimension(40, 40));
        jButtonWait.setPreferredSize(new java.awt.Dimension(40, 40));
        jButtonWait.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonWaitActionPerformed(evt);
            }
        });

        jButtonSold.setBackground(new java.awt.Color(51, 51, 51));
        jButtonSold.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wtc/sold.png"))); // NOI18N
        jButtonSold.setFocusPainted(false);
        jButtonSold.setMaximumSize(new java.awt.Dimension(40, 40));
        jButtonSold.setMinimumSize(new java.awt.Dimension(40, 40));
        jButtonSold.setPreferredSize(new java.awt.Dimension(40, 40));
        jButtonSold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSoldActionPerformed(evt);
            }
        });

        jButtonInvite.setBackground(new java.awt.Color(51, 51, 51));
        jButtonInvite.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wtc/invite.png"))); // NOI18N
        jButtonInvite.setFocusPainted(false);
        jButtonInvite.setMaximumSize(new java.awt.Dimension(40, 40));
        jButtonInvite.setMinimumSize(new java.awt.Dimension(40, 40));
        jButtonInvite.setPreferredSize(new java.awt.Dimension(40, 40));
        jButtonInvite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInviteActionPerformed(evt);
            }
        });

        jButtonTrade.setBackground(new java.awt.Color(51, 51, 51));
        jButtonTrade.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wtc/trade.png"))); // NOI18N
        jButtonTrade.setFocusPainted(false);
        jButtonTrade.setMaximumSize(new java.awt.Dimension(40, 40));
        jButtonTrade.setMinimumSize(new java.awt.Dimension(40, 40));
        jButtonTrade.setPreferredSize(new java.awt.Dimension(40, 40));
        jButtonTrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTradeActionPerformed(evt);
            }
        });

        jButtonTyvm.setBackground(new java.awt.Color(51, 51, 51));
        jButtonTyvm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wtc/tyvm.png"))); // NOI18N
        jButtonTyvm.setFocusPainted(false);
        jButtonTyvm.setMaximumSize(new java.awt.Dimension(40, 40));
        jButtonTyvm.setMinimumSize(new java.awt.Dimension(40, 40));
        jButtonTyvm.setPreferredSize(new java.awt.Dimension(40, 40));
        jButtonTyvm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTyvmActionPerformed(evt);
            }
        });

        jButtonKick.setBackground(new java.awt.Color(51, 51, 51));
        jButtonKick.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wtc/kick.png"))); // NOI18N
        jButtonKick.setFocusPainted(false);
        jButtonKick.setMaximumSize(new java.awt.Dimension(40, 40));
        jButtonKick.setMinimumSize(new java.awt.Dimension(40, 40));
        jButtonKick.setPreferredSize(new java.awt.Dimension(40, 40));
        jButtonKick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonKickActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelButtonContLayout = new javax.swing.GroupLayout(jPanelButtonCont);
        jPanelButtonCont.setLayout(jPanelButtonContLayout);
        jPanelButtonContLayout.setHorizontalGroup(
            jPanelButtonContLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelButtonContLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonWait, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jButtonSold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jButtonInvite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jButtonTrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jButtonTyvm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jButtonKick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelButtonContLayout.setVerticalGroup(
            jPanelButtonContLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelButtonContLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanelButtonContLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonKick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonTyvm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonTrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonInvite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonWait, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelBuyerName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelItemPrice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabelItemPos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabelItemName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanelButtonCont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(71, 71, 71))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabelBuyerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabelItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabelItemPos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabelItemPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelButtonCont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jLabelBuyerNameMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelBuyerNameMousePressed
        try {									
            //Put data into the clipboard							
            StringSelection selection = new StringSelection("@" + jLabelBuyerName.getText() + " ");
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(selection, selection);

            //Paste clipboard in-game
            poeToFront();							    
            Robot robot = new Robot();						        
            robot.delay(delay1);
            robot.keyPress(KeyEvent.VK_ENTER);
            robot.keyRelease(KeyEvent.VK_ENTER);
            robot.delay(delay2);
            robot.keyPress(KeyEvent.VK_CONTROL);
            robot.keyPress(KeyEvent.VK_V);							        
            robot.keyRelease(KeyEvent.VK_V);
            robot.keyRelease(KeyEvent.VK_CONTROL);				        
        }
        catch (AWTException ex) {
            System.out.println("Error with robot in buyername label");
        }
    }//GEN-LAST:event_jLabelBuyerNameMousePressed

    private void jButtonKickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonKickActionPerformed
    
        try {									
					
            //Put data into the clipboard							
            StringSelection selection = new StringSelection("/kick " + jLabelBuyerName.getText());
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(selection, selection);

            //Paste clipboard in-game
            poeToFront();							    
            Robot robot = new Robot();						        
            robot.delay(delay1);
            robot.keyPress(KeyEvent.VK_ENTER);
            robot.keyRelease(KeyEvent.VK_ENTER);
            robot.delay(delay2);
            robot.keyPress(KeyEvent.VK_CONTROL);
            robot.keyPress(KeyEvent.VK_V);							        
            robot.keyRelease(KeyEvent.VK_V);
            robot.keyRelease(KeyEvent.VK_CONTROL);
            robot.delay(delay1);
            robot.keyPress(KeyEvent.VK_ENTER);
            robot.keyRelease(KeyEvent.VK_ENTER);				        
            }
        catch (AWTException ex) {
            System.out.println("Error with robot in kick button");
        }
        
        //Card removal management
        //Get layout and cards (components)
        CardLayout c1 = (CardLayout)(cardsPanel.getLayout());
        Component[] components = cardsPanel.getComponents();
        jMenuTrades.setText("Trades (" + Integer.toString(components.length - 2) + ")");

        //Delete card & set new active card name
        for(int i = 0; i < components.length; i++) {
            if(components[i].getName().equals(activeCardName)) {                    
                if (i == (components.length - 1)) {
                    activeCardName = components[i-1].getName();
                }
                else {
                    activeCardName = components[i+1].getName();
                }                    
                c1.removeLayoutComponent(components[i]);
                cardsPanel.remove(components[i]);
                jMenuTrades.remove(i - 1);
                break;
            }
        }
        c1.show(cardsPanel, activeCardName);
        
        //Minimize window if no trade left
        if(components.length <= 2) {
            mainWindow.setAlwaysOnTop(false);
            mainWindow.toBack();
           // mainWindow.setFocusableWindowState(true);
            poeToFront();
        }
    }//GEN-LAST:event_jButtonKickActionPerformed

    private void jButtonTyvmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTyvmActionPerformed
        try {									
            //Put data into the clipboard							
            StringSelection selection = new StringSelection("@" + jLabelBuyerName.getText() + " " + thxMsg);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(selection, selection);

            //Paste clipboard in-game
            poeToFront();							    
            Robot robot = new Robot();						        
            robot.delay(delay1);
            robot.keyPress(KeyEvent.VK_ENTER);
            robot.keyRelease(KeyEvent.VK_ENTER);
            robot.delay(delay2);
            robot.keyPress(KeyEvent.VK_CONTROL);
            robot.keyPress(KeyEvent.VK_V);							        
            robot.keyRelease(KeyEvent.VK_V);
            robot.keyRelease(KeyEvent.VK_CONTROL);
            robot.delay(delay1);
            robot.keyPress(KeyEvent.VK_ENTER);
            robot.keyRelease(KeyEvent.VK_ENTER);				        
        }
        catch (AWTException ex) {
            System.out.println("Error with robot in tyvm button");
        }
    }//GEN-LAST:event_jButtonTyvmActionPerformed

    private void jButtonTradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTradeActionPerformed
        try {									
            //Put data into the clipboard							
            StringSelection selection = new StringSelection("/tradewith " + jLabelBuyerName.getText());
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(selection, selection);

            //Paste clipboard in-game
            poeToFront();							    
            Robot robot = new Robot();						        
            robot.delay(delay1);
            robot.keyPress(KeyEvent.VK_ENTER);
            robot.keyRelease(KeyEvent.VK_ENTER);
            robot.delay(delay2);
            robot.keyPress(KeyEvent.VK_CONTROL);
            robot.keyPress(KeyEvent.VK_V);							        
            robot.keyRelease(KeyEvent.VK_V);
            robot.keyRelease(KeyEvent.VK_CONTROL);
            robot.delay(delay1);
            robot.keyPress(KeyEvent.VK_ENTER);
            robot.keyRelease(KeyEvent.VK_ENTER);				        
            }
        catch (AWTException ex) {
            System.out.println("Error with robot in trade button");
        }
    }//GEN-LAST:event_jButtonTradeActionPerformed

    private void jButtonInviteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInviteActionPerformed
        try {									
            //Put data into the clipboard							
            StringSelection selection = new StringSelection("/invite " + jLabelBuyerName.getText());
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(selection, selection);

            //Paste clipboard in-game
            poeToFront();							    
            Robot robot = new Robot();						        
            robot.delay(delay1);
            robot.keyPress(KeyEvent.VK_ENTER);
            robot.keyRelease(KeyEvent.VK_ENTER);
            robot.delay(delay2);
            robot.keyPress(KeyEvent.VK_CONTROL);
            robot.keyPress(KeyEvent.VK_V);							        
            robot.keyRelease(KeyEvent.VK_V);
            robot.keyRelease(KeyEvent.VK_CONTROL);
            robot.delay(delay1);
            robot.keyPress(KeyEvent.VK_ENTER);
            robot.keyRelease(KeyEvent.VK_ENTER);				        
        }
        catch (AWTException ex) {
        System.out.println("Error with robot in invite button");
        }
    }//GEN-LAST:event_jButtonInviteActionPerformed

    private void jButtonSoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSoldActionPerformed
       try {									
            //Put data into the clipboard							
            StringSelection selection = new StringSelection("@" + jLabelBuyerName.getText() + " " + soldMsg);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(selection, selection);

            //Paste clipboard in-game
            poeToFront();
            Robot robot = new Robot();						        
            robot.delay(delay1);
            robot.keyPress(KeyEvent.VK_ENTER);
            robot.keyRelease(KeyEvent.VK_ENTER);
            robot.delay(delay2);
            robot.keyPress(KeyEvent.VK_CONTROL);
            robot.keyPress(KeyEvent.VK_V);
            robot.keyRelease(KeyEvent.VK_V);
            robot.keyRelease(KeyEvent.VK_CONTROL);
            robot.delay(delay1);
            robot.keyPress(KeyEvent.VK_ENTER);
            robot.keyRelease(KeyEvent.VK_ENTER);
        }
        catch (AWTException ex) {
            ex.printStackTrace();
        }        
        
        //Card removal management
        //Get layout and cards (components)
        CardLayout c1 = (CardLayout)(cardsPanel.getLayout());
        Component[] components = cardsPanel.getComponents();
        jMenuTrades.setText("Trades (" + Integer.toString(components.length - 2) + ")");

        //Delete card & menu item & set new active card name
        for(int i = 0; i < components.length; i++) {
            if(components[i].getName().equals(activeCardName)) {                    
                if (i == (components.length - 1)) {
                    activeCardName = components[i-1].getName();
                }
                else {
                    activeCardName = components[i+1].getName();
                }                    
                c1.removeLayoutComponent(components[i]);
                cardsPanel.remove(components[i]);
                jMenuTrades.remove(i - 1);
                break;
            }
        }
        c1.show(cardsPanel, activeCardName);
        
        //Minimize window if no trade left
        if(components.length <= 2) {
            mainWindow.setAlwaysOnTop(false);
            mainWindow.toBack();
            //mainWindow.setFocusableWindowState(true);
            poeToFront();
        }
    }//GEN-LAST:event_jButtonSoldActionPerformed

    private void jButtonWaitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonWaitActionPerformed
        try {									
            //Put data into the clipboard							
            StringSelection selection = new StringSelection("@" + jLabelBuyerName.getText() + " " + waitMsg);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(selection, selection);

            //Paste clipboard in-game
            poeToFront();							    
            Robot robot = new Robot();						        
            robot.delay(delay1);
            robot.keyPress(KeyEvent.VK_ENTER);
            robot.keyRelease(KeyEvent.VK_ENTER);
            robot.delay(delay2);
            robot.keyPress(KeyEvent.VK_CONTROL);
            robot.keyPress(KeyEvent.VK_V);							        
            robot.keyRelease(KeyEvent.VK_V);
            robot.keyRelease(KeyEvent.VK_CONTROL);
            robot.delay(delay1);
            robot.keyPress(KeyEvent.VK_ENTER);
            robot.keyRelease(KeyEvent.VK_ENTER);
        }
        catch (AWTException ex) {
            System.out.println("Error with robot in wait button");
        }
    }//GEN-LAST:event_jButtonWaitActionPerformed

    private void jLabelItemNameMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelItemNameMousePressed
	//Put data into the clipboard							
        StringSelection selection = new StringSelection(jLabelItemName.getText());
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(selection, selection);

        jLabelItemName.setForeground(new Color(255, 255, 255));
        poeToFront();
    }//GEN-LAST:event_jLabelItemNameMousePressed
                   
   private void poeToFront() {
        WinDef.HWND handle = User32.INSTANCE.FindWindow(null, "Path of Exile");
        User32.INSTANCE.ShowWindow(handle, 9);
        User32.INSTANCE.SetForegroundWindow(handle);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonInvite;
    private javax.swing.JButton jButtonKick;
    private javax.swing.JButton jButtonSold;
    private javax.swing.JButton jButtonTrade;
    private javax.swing.JButton jButtonTyvm;
    private javax.swing.JButton jButtonWait;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelBuyerName;
    private javax.swing.JLabel jLabelItemName;
    private javax.swing.JLabel jLabelItemPos;
    private javax.swing.JLabel jLabelItemPrice;
    private javax.swing.JPanel jPanelButtonCont;
    // End of variables declaration//GEN-END:variables
}
